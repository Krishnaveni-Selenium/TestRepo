<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="1" passed="0">
  <reporter-output>
    <line>
      <![CDATA[]]>
    </line>
    <line>
      <![CDATA[Test testDemoA is Fail/SKIPPED]]>
    </line>
  </reporter-output>
  <suite name="Default suite" duration-ms="5977" started-at="2019-02-28T07:22:48Z" finished-at="2019-02-28T07:22:54Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="5977" started-at="2019-02-28T07:22:48Z" finished-at="2019-02-28T07:22:54Z">
      <class name="script.Demo">
        <test-method status="PASS" signature="openApp()[pri:0, instance:script.Demo@29ee9faa]" name="openApp" is-config="true" duration-ms="5170" started-at="2019-02-28T12:52:48Z" finished-at="2019-02-28T12:52:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApp -->
        <test-method status="FAIL" signature="testDemoA()[pri:0, instance:script.Demo@29ee9faa]" name="testDemoA" duration-ms="172" started-at="2019-02-28T12:52:53Z" finished-at="2019-02-28T12:52:53Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.fail(Assert.java:101)
	at script.Demo.testDemoA(Demo.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[]]>
            </line>
          </reporter-output>
        </test-method> <!-- testDemoA -->
        <test-method status="PASS" signature="closeApp(org.testng.ITestResult)[pri:0, instance:script.Demo@29ee9faa]" name="closeApp" is-config="true" duration-ms="611" started-at="2019-02-28T12:52:53Z" finished-at="2019-02-28T12:52:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDemoA status=FAILURE method=Demo.testDemoA()[pri:0, instance:script.Demo@29ee9faa] output=""]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test testDemoA is Fail/SKIPPED]]>
            </line>
          </reporter-output>
        </test-method> <!-- closeApp -->
      </class> <!-- script.Demo -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
